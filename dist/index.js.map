{"version":3,"sources":["index.js"],"names":["observeEntry","config","defaults","options","intersectingClass","root","rootMargin","threshold","selector","els","document","querySelectorAll","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","target","classList","add","call","el","observe"],"mappings":";AAsCeA,aAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,EAAAA,OAAAA,KAAAA,GAAAA,GAAAA,OAAAA,sBAAAA,CAAAA,IAAAA,EAAAA,OAAAA,sBAAAA,GAAAA,IAAAA,EAAAA,EAAAA,OAAAA,SAAAA,GAAAA,OAAAA,OAAAA,yBAAAA,EAAAA,GAAAA,cAAAA,EAAAA,KAAAA,MAAAA,EAAAA,GAAAA,OAAAA,EAAAA,SAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,CAAAA,IAAAA,EAAAA,MAAAA,UAAAA,GAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,EAAAA,GAAAA,GAAAA,QAAAA,SAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,MAAAA,OAAAA,0BAAAA,OAAAA,iBAAAA,EAAAA,OAAAA,0BAAAA,IAAAA,EAAAA,GAAAA,QAAAA,SAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,OAAAA,yBAAAA,EAAAA,MAAAA,OAAAA,EAAAA,SAAAA,EAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,EAAAA,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAtCf,IAAMA,EAAe,SAAAC,GAEXC,IAOFC,EAPED,EAAW,CACbE,kBAAmB,iBACnBC,KAAM,KACNC,WAAY,MACZC,UAAW,GAKV,GAAiB,iBAAVN,EACRC,EAASM,SAAWP,EACpBE,EAAeD,EAAAA,GAAAA,OACZ,CACC,IAACD,EAAOO,SACF,KAAA,gDAEVL,EAAeD,EAAAA,GAAAA,EAAaD,GAAAA,GAG1BQ,IAAAA,EAAMC,SAASC,iBAAkBR,EAAQK,UAUzCI,EAAW,IAAIC,qBARJ,SAAAC,GACbA,EAAQC,QAAS,SAAAC,GACRA,EAAMC,gBACPD,EAAME,OAAOC,UAAUC,IAAKjB,EAAQC,sBAKKD,GAI9CS,MAFJG,GAAAA,QAAQM,KAAKZ,EAAK,SAAAa,GAAMV,OAAAA,EAASW,QAASD,KAEtCV,GAGIZ,EAAAA,EAAAA,QAAAA,QAAAA","file":"index.js","sourceRoot":"../src","sourcesContent":["const observeEntry = config => {\n\n    const defaults = {\n        intersectingClass: 'is-intersected',\n        root: null,\n        rootMargin: '0px',\n        threshold: 1.0\n    }\n\n    let options;\n\n    if ( typeof config == 'string' ) {\n        defaults.selector = config;\n        options = { ...defaults };\n    } else {\n        if( !config.selector ) {\n            throw '\"Selector\" key is required in options object.';\n        }\n        options = { ...defaults, ...config };\n    }\n\n    const els = document.querySelectorAll( options.selector );\n\n    const callback = entries => {\n        entries.forEach( entry => {\n            if ( entry.isIntersecting ) {\n                entry.target.classList.add( options.intersectingClass );\n            }\n        });\n    }\n\n    const observer = new IntersectionObserver( callback, options );\n\n    [].forEach.call(els, el => observer.observe( el ));\n\n    return observer;\n}\n\nexport default observeEntry;\n"]}